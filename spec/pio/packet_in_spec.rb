require 'pio/packet_in'

describe Pio::PacketIn do
  describe '.read' do
    context 'with a packet_in message' do
      Given(:packet_in_dump) do
        [0x01, 0x0a, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
         0xff, 0x00, 0x00, 0x3c, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff,
         0xff, 0xff, 0xff, 0xff, 0xac, 0x5d, 0x10, 0x31, 0x37, 0x79,
         0x08, 0x06, 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01,
         0xac, 0x5d, 0x10, 0x31, 0x37, 0x79, 0xc0, 0xa8, 0x02, 0xfe,
         0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xa8, 0x02, 0x05,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].pack('C*')
      end

      When(:packet_in) { Pio::PacketIn.read(packet_in_dump) }

      Then { packet_in.class == Pio::PacketIn }
      Then { packet_in.ofp_version == 1 }
      Then { packet_in.message_type == 10 }
      Then { packet_in.message_length == 78 }
      Then { packet_in.xid == 0 }
      Then { !packet_in.body.empty? }
    end
  end
end
