# -*- coding: utf-8 -*-
require 'pio'

describe Pio::Dhcp do
  context '.read' do
    subject { Pio::Dhcp.read(data.pack('C*')) }

    context 'with DHCP Discover frame' do
      let(:data) do
        [
          # Destination MAC Address
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          # Source MAC Address
          0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Ethernet Type
          0x08, 0x00,
          # IP version and IP Header Length
          0x45,
          # DSCP
          0x00,
          # IP Total Length
          0x01, 0x48,
          # IP Identifier
          0x00, 0x00,
          # IP Flags and IP Fragmentation
          0x00, 0x00,
          # IP TTL
          0x80,
          # IP Protocol
          0x11,
          # IP Header Checksum
          0x39, 0xa6,
          # IP Source Address
          0x00, 0x00, 0x00, 0x00,
          # IP Destination Address
          0xff, 0xff, 0xff, 0xff,
          # UDP Source Port
          0x00, 0x44,
          # UDP Destination Port
          0x00, 0x43,
          # UDP Total Length
          0x01, 0x34,
          # UDP Header Checksum
          0x88, 0x14,
          # Bootp Msg Type
          0x01,
          # Hw Type
          0x01,
          # Hw Address Length
          0x06,
          # Hops
          0x00,
          # Transaction ID
          0xde, 0xad, 0xbe, 0xef,
          # Seconds
          0x00, 0x00,
          # Bootp Flags
          0x00, 0x00,
          # Client IP Address
          0x00, 0x00, 0x00, 0x00,
          # Your IP Address
          0x00, 0x00, 0x00, 0x00,
          # Next Server IP Address
          0x00, 0x00, 0x00, 0x00,
          # Relay Agent IP Address
          0x00, 0x00, 0x00, 0x00,
          # Client MAC Address
          0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Client Hw Address Padding
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Server Host Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Boot File Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Magic Cookie
          0x63, 0x82, 0x53, 0x63,
          # DHCP Msg Type
          0x35, 0x01, 0x01,
          # Client Identifier
          0x3d, 0x07, 0x01, 0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Requested IP Address
          0x32, 0x04, 0x00, 0x00, 0x00, 0x00,
          # Parameter Lists
          0x37, 0x04, 0x01, 0x03, 0x06, 0x2a,
          # End Option
          0xff,
          # Padding Field
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ]
      end

      its(:class) { should be Pio::Dhcp::Discover }
      its('destination_mac.to_s') { should eq 'ff:ff:ff:ff:ff:ff' }
      its('source_mac.to_s') { should eq '24:db:ac:41:e5:5b' }
      its(:ether_type) { should eq 2048 }
      its(:ip_version) { should eq 4 }
      its(:ip_header_length) { should eq 5 }
      its(:ip_type_of_service) { should eq 0 }
      its(:ip_total_length) { should eq 328 }
      its(:ip_identifier) { should eq 0x0000 }
      its(:ip_flag) { should eq 0 }
      its(:ip_fragment) { should eq 0 }
      its(:ip_ttl) { should eq 128 }
      its(:ip_protocol) { should eq 17 }
      its(:ip_header_checksum) { should eq 0x39a6 }
      its('ip_source_address.to_s') { should eq '0.0.0.0' }
      its('ip_destination_address.to_s') { should eq '255.255.255.255' }
      its(:udp_src_port) { should eq 68 }
      its(:udp_dst_port) { should eq 67 }
      its(:udp_length) { should eq 308 }
      its(:udp_checksum) { should eq 0x8814 }
      its(:message_type) { should eq 1 }
      its(:hw_addr_type) { should eq 1 }
      its(:hw_addr_len) { should eq 6 }
      its(:hops) { should eq 0 }
      its(:transaction_id) { should eq 0xdeadbeef }
      its(:seconds) { should eq 0 }
      its(:bootp_flags) { should eq 0 }
      its('client_ip_address.to_s') { should eq '0.0.0.0' }
      its('your_ip_address.to_s') { should eq '0.0.0.0' }
      its('next_server_ip_address.to_s') { should eq '0.0.0.0' }
      its('relay_agent_ip_address.to_s') { should eq '0.0.0.0' }
      its('client_mac_address.to_s') { should eq '24:db:ac:41:e5:5b' }
      its('client_identifier_tlv.to_s') { should eq '24:db:ac:41:e5:5b' }
      its('requested_ip_address_tlv.to_s') { should eq '0.0.0.0' }
      its(:parameters_list_tlv) { should eq  [0x01, 0x03, 0x06, 0x2a] }
    end

    context 'with DHCP offer frame' do
      let(:data) do
        [
          # Destination MAC Address
          0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
          # Source MAC Address
          0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
          # Ethernet Type
          0x08, 0x00,
          # IP version and IP Header Length
          0x45,
          # DSCP
          0x00,
          # IP Total Length
          0x01, 0x48,
          # IP Identifier
          0x00, 0x00,
          # IP Flags and IP Fragmentation
          0x00, 0x00,
          # IP TTL
          0x80,
          # IP Protocol
          0x11,
          # IP Header Checksum
          0xb8, 0x49,
          # IP Source Address
          0xc0, 0xa8, 0x00, 0x0a,
          # IP Destination Address
          0xc0, 0xa8, 0x00, 0x01,
          # UDP Source Port
          0x00, 0x43,
          # UDP Destination Port
          0x00, 0x44,
          # UDP Total Length
          0x01, 0x34,
          # UDP Header Checksum
          0x1e, 0x64,
          # Bootp Msg Type
          0x02,
          # Hw Type
          0x01,
          # Hw Address Length
          0x06,
          # Hops
          0x00,
          # Transaction ID
          0xde, 0xad, 0xbe, 0xef,
          # Seconds
          0x00, 0x00,
          # Bootp Flags
          0x00, 0x00,
          # Client IP Address
          0x00, 0x00, 0x00, 0x00,
          # Your IP Address
          0xc0, 0xa8, 0x00, 0x01,
          # Next Server IP Address
          0x00, 0x00, 0x00, 0x00,
          # Relay Agent IP Address
          0x00, 0x00, 0x00, 0x00,
          # Client MAC Address
          0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
          # Client Hw Address Padding
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Server Host Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Boot File Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Magic Cookie
          0x63, 0x82, 0x53, 0x63,
          # DHCP Msg Type
          0x35, 0x01, 0x02,
          # Renewal Time Value
          0x3a, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # Rebinding Time Value
          0x3b, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # IP Address Lease Time Value
          0x33, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # DHCP Server Identifier
          0x36, 0x04, 0xc0, 0xa8, 0x00, 0x0a,
          # Subnet Mask
          0x01, 0x04, 0xff, 0xff, 0xff, 0x00,
          # End Option
          0xff,
          # Padding Field
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00
        ]
      end

      its(:class) { should be Pio::Dhcp::Offer }
      its('destination_mac.to_s') { should eq '11:22:33:44:55:66' }
      its('source_mac.to_s') { should eq 'aa:bb:cc:dd:ee:ff' }
      its(:ether_type) { should eq 2048 }
      its(:ip_version) { should eq 4 }
      its(:ip_header_length) { should eq 5 }
      its(:ip_type_of_service) { should eq 0 }
      its(:ip_total_length) { should eq 328 }
      its(:ip_identifier) { should eq 0x0000 }
      its(:ip_flag) { should eq 0 }
      its(:ip_fragment) { should eq 0 }
      its(:ip_ttl) { should eq 128 }
      its(:ip_protocol) { should eq 17 }
      its(:ip_header_checksum) { should eq 0xb849 }
      its('ip_source_address.to_s') { should eq '192.168.0.10' }
      its('ip_destination_address.to_s') { should eq '192.168.0.1' }
      its(:udp_src_port) { should eq 67 }
      its(:udp_dst_port) { should eq 68 }
      its(:udp_length) { should eq 308 }
      its(:udp_checksum) { should eq 7780 }
      its(:message_type) { should eq 2 }
      its(:hw_addr_type) { should eq 1 }
      its(:hw_addr_len) { should eq 6 }
      its(:hops) { should eq 0 }
      its(:transaction_id) { should eq 0xdeadbeef }
      its(:seconds) { should eq 0 }
      its(:bootp_flags) { should eq 0x0000 }
      its('client_ip_address.to_s') { should eq '0.0.0.0' }
      its('your_ip_address.to_s') { should eq '192.168.0.1' }
      its('next_server_ip_address.to_s') { should eq '0.0.0.0' }
      its('relay_agent_ip_address.to_s') { should eq '0.0.0.0' }
      its('client_mac_address.to_s') { should eq 'aa:bb:cc:dd:ee:ff' }
      its('server_identifier_tlv.to_s') { should eq '192.168.0.10' }
      its('subnet_mask_tlv.to_s') { should eq '255.255.255.0' }
      its(:renewal_time_value_tlv) { should eq 0xdeadbeef }
      its(:rebinding_time_value_tlv) { should eq 0xdeadbeef }
      its(:ip_address_lease_time_tlv) { should eq 0xdeadbeef }
    end

    context 'with DHCP Request frame' do
      let(:data) do
        [
          # Destination MAC Address
          0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
          # Source MAC Address
          0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Ethernet Type
          0x08, 0x00,
          # IP version and IP Header Length
          0x45,
          # DSCP
          0x00,
          # IP Total Length
          0x01, 0x48,
          # IP Identifier
          0x00, 0x00,
          # IP Flags and IP Fragmentation
          0x00, 0x00,
          # IP TTL
          0x80,
          # IP Protocol
          0x11,
          # IP Header Checksum
          0x39, 0xa6,
          # IP Source Address
          0x00, 0x00, 0x00, 0x00,
          # IP Destination Address
          0xff, 0xff, 0xff, 0xff,
          # UDP Source Port
          0x00, 0x44,
          # UDP Destination Port
          0x00, 0x43,
          # UDP Total Length
          0x01, 0x34,
          # UDP Header Checksum
          0xce, 0xb3,
          # Bootp Msg Type
          0x01,
          # Hw Type
          0x01,
          # Hw Address Length
          0x06,
          # Hops
          0x00,
          # Transaction ID
          0xde, 0xad, 0xbe, 0xef,
          # Seconds
          0x00, 0x00,
          # Bootp Flags
          0x00, 0x00,
          # Client IP Address
          0x00, 0x00, 0x00, 0x00,
          # Your IP Address
          0x00, 0x00, 0x00, 0x00,
          # Next Server IP Address
          0x00, 0x00, 0x00, 0x00,
          # Relay Agent IP Address
          0x00, 0x00, 0x00, 0x00,
          # Client MAC Address
          0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Client Hw Address Padding
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Server Host Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Boot File Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Magic Cookie
          0x63, 0x82, 0x53, 0x63,
          # DHCP Msg Type
          0x35, 0x01, 0x03,
          # Client Identifier
          0x3d, 0x07, 0x01, 0x24, 0xdb, 0xac, 0x41, 0xe5, 0x5b,
          # Requested IP Address
          0x32, 0x04, 0xc0, 0xa8, 0x00, 0x0a,
          # Parameter Lists
          0x37, 0x04, 0x01, 0x03, 0x06, 0x2a,
          # DHCP Server Identifier
          0x36, 0x04, 0xc0, 0xa8, 0x00, 0x01,
          # End Option
          0xff,
          # Padding Field
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00
        ]
      end

      its(:class) { should be Pio::Dhcp::Request }
      its('destination_mac.to_s') { should eq 'ff:ff:ff:ff:ff:ff' }
      its('source_mac.to_s') { should eq '24:db:ac:41:e5:5b' }
      its(:ether_type) { should eq 2048 }
      its(:ip_version) { should eq 4 }
      its(:ip_header_length) { should eq 5 }
      its(:ip_type_of_service) { should eq 0 }
      its(:ip_total_length) { should eq 328 }
      its(:ip_identifier) { should eq 0x0000 }
      its(:ip_flag) { should eq 0 }
      its(:ip_fragment) { should eq 0 }
      its(:ip_ttl) { should eq 128 }
      its(:ip_protocol) { should eq 17 }
      its(:ip_header_checksum) { should eq 0x39a6 }
      its('ip_source_address.to_s') { should eq '0.0.0.0' }
      its('ip_destination_address.to_s') { should eq '255.255.255.255' }
      its(:udp_src_port) { should eq 68 }
      its(:udp_dst_port) { should eq 67 }
      its(:udp_length) { should eq 308 }
      its(:udp_checksum) { should eq 0xceb3 }
      its(:message_type) { should eq 3 }
      its(:hw_addr_type) { should eq 1 }
      its(:hw_addr_len) { should eq 6 }
      its(:hops) { should eq 0 }
      its(:transaction_id) { should eq 0xdeadbeef }
      its(:seconds) { should eq 0 }
      its(:bootp_flags) { should eq 0 }
      its('client_ip_address.to_s') { should eq '0.0.0.0' }
      its('your_ip_address.to_s') { should eq '0.0.0.0' }
      its('next_server_ip_address.to_s') { should eq '0.0.0.0' }
      its('relay_agent_ip_address.to_s') { should eq '0.0.0.0' }
      its('client_mac_address.to_s') { should eq '24:db:ac:41:e5:5b' }
      its('client_identifier_tlv.to_s') { should eq '24:db:ac:41:e5:5b' }
      its('requested_ip_address_tlv.to_s') { should eq '192.168.0.10' }
      its(:parameters_list_tlv) { should eq  [0x01, 0x03, 0x06, 0x2a] }
    end

    context 'with DHCP ACK frame' do
      let(:data) do
        [
          # Destination MAC Address
          0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
          # Source MAC Address
          0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
          # Ethernet Type
          0x08, 0x00,
          # IP version and IP Header Length
          0x45,
          # DSCP
          0x00,
          # IP Total Length
          0x01, 0x48,
          # IP Identifier
          0x00, 0x00,
          # IP Flags and IP Fragmentation
          0x00, 0x00,
          # IP TTL
          0x80,
          # IP Protocol
          0x11,
          # IP Header Checksum
          0xb8, 0x49,
          # IP Source Address
          0xc0, 0xa8, 0x00, 0x0a,
          # IP Destination Address
          0xc0, 0xa8, 0x00, 0x01,
          # UDP Source Port
          0x00, 0x43,
          # UDP Destination Port
          0x00, 0x44,
          # UDP Total Length
          0x01, 0x34,
          # UDP Header Checksum
          0x1b, 0x64,
          # Bootp Msg Type
          0x02,
          # Hw Type
          0x01,
          # Hw Address Length
          0x06,
          # Hops
          0x00,
          # Transaction ID
          0xde, 0xad, 0xbe, 0xef,
          # Seconds
          0x00, 0x00,
          # Bootp Flags
          0x00, 0x00,
          # Client IP Address
          0x00, 0x00, 0x00, 0x00,
          # Your IP Address
          0xc0, 0xa8, 0x00, 0x01,
          # Next Server IP Address
          0x00, 0x00, 0x00, 0x00,
          # Relay Agent IP Address
          0x00, 0x00, 0x00, 0x00,
          # Client MAC Address
          0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
          # Client Hw Address Padding
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Server Host Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Boot File Name
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          # Magic Cookie
          0x63, 0x82, 0x53, 0x63,
          # DHCP Msg Type
          0x35, 0x01, 0x05,
          # Renewal Time Value
          0x3a, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # Rebinding Time Value
          0x3b, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # IP Address Lease Time Value
          0x33, 0x04, 0xde, 0xad, 0xbe, 0xef,
          # DHCP Server Identifier
          0x36, 0x04, 0xc0, 0xa8, 0x00, 0x0a,
          # Subnet Mask
          0x01, 0x04, 0xff, 0xff, 0xff, 0x00,
          # End Option
          0xff,
          # Padding Field
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00
        ]
      end

      its(:class) { should be Pio::Dhcp::Ack }
      its('destination_mac.to_s') { should eq '11:22:33:44:55:66' }
      its('source_mac.to_s') { should eq 'aa:bb:cc:dd:ee:ff' }
      its(:ether_type) { should eq 2048 }
      its(:ip_version) { should eq 4 }
      its(:ip_header_length) { should eq 5 }
      its(:ip_type_of_service) { should eq 0 }
      its(:ip_total_length) { should eq 328 }
      its(:ip_identifier) { should eq 0x0000 }
      its(:ip_flag) { should eq 0 }
      its(:ip_fragment) { should eq 0 }
      its(:ip_ttl) { should eq 128 }
      its(:ip_protocol) { should eq 17 }
      its(:ip_header_checksum) { should eq 0xb849 }
      its('ip_source_address.to_s') { should eq '192.168.0.10' }
      its('ip_destination_address.to_s') { should eq '192.168.0.1' }
      its(:udp_src_port) { should eq 67 }
      its(:udp_dst_port) { should eq 68 }
      its(:udp_length) { should eq 308 }
      its(:udp_checksum) { should eq 0x1b64 }
      its(:message_type) { should eq 5 }
      its(:hw_addr_type) { should eq 1 }
      its(:hw_addr_len) { should eq 6 }
      its(:hops) { should eq 0 }
      its(:transaction_id) { should eq 0xdeadbeef }
      its(:seconds) { should eq 0 }
      its(:bootp_flags) { should eq 0x0000 }
      its('client_ip_address.to_s') { should eq '0.0.0.0' }
      its('your_ip_address.to_s') { should eq '192.168.0.1' }
      its('next_server_ip_address.to_s') { should eq '0.0.0.0' }
      its('relay_agent_ip_address.to_s') { should eq '0.0.0.0' }
      its('client_mac_address.to_s') { should eq 'aa:bb:cc:dd:ee:ff' }
      its('server_identifier_tlv.to_s') { should eq '192.168.0.10' }
      its('subnet_mask_tlv.to_s') { should eq '255.255.255.0' }
      its(:renewal_time_value_tlv) { should eq 0xdeadbeef }
      its(:rebinding_time_value_tlv) { should eq 0xdeadbeef }
      its(:ip_address_lease_time_tlv) { should eq 0xdeadbeef }
    end
  end
end

### Local variables:
### mode: Ruby
### coding: utf-8-unix
### indent-tabs-mode: nil
### End:
