#+OPTIONS: toc:nil num:nil ^:nil
#+OPTIONS: author:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil

* Pio
#+BEGIN_HTML
<a href='https://rubygems.org/gems/pio'><img src='http://img.shields.io/gem/v/pio.svg?style=flat' alt='Gem Version' /></a>
<a href='https://travis-ci.org/trema/pio'><img src='http://img.shields.io/travis/trema/pio/develop.svg?style=flat' alt='Build Status' /></a>
<a href='https://codeclimate.com/github/trema/pio'><img src='http://img.shields.io/codeclimate/github/trema/pio.svg?style=flat' alt='Code Climate' /></a>
<a href='https://coveralls.io/r/trema/pio?branch=develop'><img src='http://img.shields.io/coveralls/trema/pio/develop.svg?style=flat' alt='Coverage Status' /></a>
<a href='https://gemnasium.com/trema/pio'><img src='http://img.shields.io/gemnasium/trema/pio.svg?style=flat' alt='Dependency Status' /></a>
<a href='https://gitter.im/trema/pio'><img src='https://badges.gitter.im/Join Chat.svg?style=flat' alt='Gitter Chat' /></a>
<a href="http://inch-pages.github.io/github/trema/pio"><img src="http://inch-pages.github.io/github/trema/pio.svg" alt="Inline docs"></a>
#+END_HTML

#+BEGIN_HTML
<a href="http://www.flickr.com/photos/mongogushi/4226014070/" title="pio pencil by mongo gushi, on Flickr"><img src="http://farm5.staticflickr.com/4022/4226014070_cdeb7c1e5d_n.jpg" width="320" height="290" alt="pio pencil"></a>
#+END_HTML

Pio is a ruby gem to easily parse and generate network packets. It
supports the following packet formats:

 - ICMP
 - ARP
 - LLDP
 - DHCP
 - OpenFlow 1.0
   - Hello
   - Echo
   - Features
   - Packet-In
   - Packet-Out
   - Flow Mod
   - Port Status
 - (...currently there are just a few formats supported but I'm sure this list will grow)

** Features Overview
- Pure Ruby. No additional dependency on other external tools to
  parse/generate packets.
- Multi-Platform. Runs on major operating systems (recent Windows,
  Linux, and MacOSX).
- Clean Code. Pio is built on [[https://github.com/dmendel/bindata][BinData]]'s declarative binary format DSL
  so that it is easy to read and debug by human beings.

** Examples
Its usage is dead simple.

*** ICMP
To parse an ICMP frame, use the API =Pio::Icmp.read= and you can
access each field of the parsed ICMP frame.

#+INCLUDE: "./examples/icmp_read.rb" src ruby

Also you can use =Pio::Icmp::Request#new= or =Pio::Icmp::Reply#new= to
generate an Icmp Request/Reply frame like below:

#+INCLUDE: "./examples/icmp_new.rb" src ruby

*** ARP
To parse an ARP frame, use the API =Pio::Arp.read= and you can access
each field of the parsed ARP frame.

#+INCLUDE: "./examples/arp_read.rb" src ruby

Also you can use =Pio::Arp::Request#new= or =Pio::Arp::Reply#new= to
generate an Arp Request/Reply frame like below:

#+INCLUDE: "./examples/arp_new.rb" src ruby

*** LLDP
To parse an LLDP frame, use the API =Pio::Lldp.read= and you can
access each field of the parsed LLDP frame.

#+INCLUDE: "./examples/lldp_read.rb" src ruby

Also you can use =Pio::Lldp#new= to generate an LLDP frame like below:

#+INCLUDE: "./examples/lldp_new.rb" src ruby

*** DHCP
To parse a DHCP frame, use the API =Pio::Dhcp.read= and you can access
each field of the parsed DHCP frame.

#+INCLUDE: "./examples/dhcp_read.rb" src ruby

Also you can use =Pio::Dhcp::Discover#new=,
=Pio::Dhcp::Offer#new=, =Pio::Dhcp::Request#new= and
=Pio::Dhcp::Ack#new= to generate a DHCP frame like below:

#+INCLUDE: "./examples/dhcp_new.rb" src ruby

*** Hello
To parse an OpenFlow 1.0 Hello message, use the API =Pio::Hello.read=
and you can access each field of the parsed Hello message.

#+INCLUDE: "./examples/hello_read.rb" src ruby

Also you can use =Pio::Hello#new= to generate a Hello message like
below:

#+INCLUDE: "./examples/hello_new.rb" src ruby

*** Echo
To parse an OpenFlow 1.0 Echo message, use the API =Pio::Echo.read=
and you can access each field of the parsed Echo message.

#+INCLUDE: "./examples/echo_read.rb" src ruby

Also you can use =Pio::Echo::Request#new= or =Pio::Echo::Reply#new= to
generate an Echo Request/Reply message like below:

#+INCLUDE: "./examples/echo_new.rb" src ruby
*** Features
To parse an OpenFlow 1.0 Features message, use the API
=Pio::Features.read= and you can access each field of the parsed
Features message.

#+INCLUDE: "./examples/features_read.rb" src ruby

Also you can use =Pio::Features::Request#new= or =Pio::Features::Reply#new= to
generate an Features Request/Reply message like below:

#+INCLUDE: "./examples/features_new.rb" src ruby
*** Packet-In
To parse an OpenFlow 1.0 Packet-In message, use the API
=Pio::PacketIn.read= and you can access each field of the parsed
Packet-In message.

#+INCLUDE: "./examples/packet_in_read.rb" src ruby

Also you can use =Pio::PacketIn#new= to generate a Packet-In message
like below:

#+INCLUDE: "./examples/packet_in_new.rb" src ruby
*** Packet-Out
To parse an OpenFlow 1.0 Packet-Out message, use the API
=Pio::PacketOut.read= and you can access each field of the parsed
Packet-Out message.

#+INCLUDE: "./examples/packet_out_read.rb" src ruby

Also you can use =Pio::PacketOut#new= to generate a Packet-Out message
like below:

#+INCLUDE: "./examples/packet_out_new.rb" src ruby
*** Flow Mod
To parse an OpenFlow 1.0 flow mod message, use the API
=Pio::FlowMod.read= and you can access each field of the parsed
flow mod message.

#+INCLUDE: "./examples/flow_mod_read.rb" src ruby

Also you can use =Pio::FlowMod#new= and =Pio::Match#new= to generate a
flow mod message like below:

#+INCLUDE: "./examples/flow_mod_new.rb" src ruby
** Installation
The simplest way to install Pio is to use [[http://gembundler.com/][Bundler]].

Add Pio to your =Gemfile=:

#+BEGIN_SRC ruby
gem 'pio'
#+END_SRC

and install it by running Bundler:

#+BEGIN_SRC sh
  prompt> bundle
#+END_SRC

** Documents
- [[http://rubydoc.info/github/trema/pio/frames/file/README.md][API document generated with YARD]]

** Team
- [[https://github.com/yasuhito][Yasuhito Takamiya]] ([[https://twitter.com/yasuhito][@yasuhito]])
- [[https://github.com/shun159][Eishun Kondoh]] ([[https://twitter.com/Eishun_Kondoh][@Eishun_Kondoh]])

*** Contributors
[[https://github.com/trema/pio/contributors]]

** Alternatives
- PacketFu: https://github.com/todb/packetfu
- Racket: http://spoofed.org/files/racket/

** License
Pio is released under the GNU General Public License version 3.0:

- http://www.gnu.org/licenses/gpl.html
